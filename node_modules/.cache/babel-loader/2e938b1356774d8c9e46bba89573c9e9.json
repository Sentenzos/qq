{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import ChatField from\"./ChatField\";import Message from\"./Message\";import scrollTo from\"../../../common/JS/scrollTo\";var ChatWall=React.memo(function(props){var messagesField=useRef(null);useEffect(function(){scrollTo.bottom.document();},[props.messages[0]]);var contactAvatar=props.dialogs.find(function(d){return d.id===props.contactIs?d:null;});var messages;if(!props.messages.length){messages=React.createElement(\"div\",{className:\"message-wrapper\"},React.createElement(\"div\",{className:\"message\"},React.createElement(\"div\",{className:\"message__avatar\"}),React.createElement(\"div\",{className:\"message__body\"},React.createElement(\"div\",{className:\"message__info\"},React.createElement(\"h1\",{className:\"message__from\"},\"Nobody\")),React.createElement(\"p\",{className:\"message__text\"},\" There are no messages yet =(\"))));}else{messages=props.messages.map(function(m,i){var messageDate=new Date(m.addedAt);var prevMessageDate,messageDelay,prevSenderId;if(i){prevMessageDate=new Date(props.messages[i-1].addedAt);messageDelay=messageDate-prevMessageDate;prevSenderId=props.messages[i-1].senderId;}return React.createElement(Message,{key:m.id,messageId:m.id,messageDate:messageDate,senderId:m.senderId,senderName:m.senderName,myId:props.myId,myAvatar:props.myAvatar,contactAvatar:contactAvatar.photos.small,messageText:m.body,viewed:m.viewed,messageDelay:messageDelay,prevSenderId:prevSenderId,deleteMessage:props.deleteMessage,deletingMessages:props.deletingMessages});});}return React.createElement(\"div\",{className:\"dialogs-field\"},React.createElement(\"div\",{className:\"dialogs-field__messages\"},messages),React.createElement(ChatField,{sendNewMessage:props.sendNewMessage,contactsListElem:props.contactsListElem}));});var s=5;export default ChatWall;","map":{"version":3,"sources":["D:/my-own-social-network/src/components/Dialogs/ChatWall/Ð¡hatWall.jsx"],"names":["React","useEffect","useRef","ChatField","Message","scrollTo","ChatWall","memo","props","messagesField","bottom","document","messages","contactAvatar","dialogs","find","d","id","contactIs","length","map","m","i","messageDate","Date","addedAt","prevMessageDate","messageDelay","prevSenderId","senderId","senderName","myId","myAvatar","photos","small","body","viewed","deleteMessage","deletingMessages","sendNewMessage","contactsListElem","s"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from \"react\";\r\nimport ChatField from \"./ChatField\";\r\nimport Message from \"./Message\";\r\nimport scrollTo from \"../../../common/JS/scrollTo\";\r\n\r\n\r\nconst ChatWall = React.memo((props) => {\r\n\r\n  const messagesField = useRef(null);\r\n\r\n  useEffect(() => {\r\n    scrollTo.bottom.document();\r\n  }, [props.messages[0]]);\r\n\r\n  const contactAvatar = props.dialogs.find(d => {\r\n    return d.id === props.contactIs ? d : null\r\n  });\r\n\r\n  let messages;\r\n\r\n  if (!props.messages.length) {\r\n\r\n    messages = (\r\n      <div className=\"message-wrapper\">\r\n        <div className=\"message\">\r\n          <div className=\"message__avatar\">\r\n          </div>\r\n          <div className=\"message__body\">\r\n            <div className=\"message__info\">\r\n              <h1 className=\"message__from\">Nobody</h1>\r\n            </div>\r\n            <p className=\"message__text\"> There are no messages yet =(</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n\r\n    messages = props.messages.map((m, i) => {\r\n      const messageDate = new Date(m.addedAt);\r\n      let prevMessageDate, messageDelay, prevSenderId;\r\n\r\n      if (i) {\r\n        prevMessageDate = new Date(props.messages[i - 1].addedAt);\r\n        messageDelay = messageDate - prevMessageDate;\r\n        prevSenderId = props.messages[i - 1].senderId;\r\n      }\r\n\r\n      return (\r\n        <Message\r\n          key={m.id}\r\n          messageId={m.id}\r\n          messageDate={messageDate}\r\n          senderId={m.senderId}\r\n          senderName={m.senderName}\r\n          myId={props.myId}\r\n          myAvatar={props.myAvatar}\r\n          contactAvatar={contactAvatar.photos.small}\r\n          messageText={m.body}\r\n          viewed={m.viewed}\r\n          messageDelay={messageDelay}\r\n          prevSenderId={prevSenderId}\r\n          deleteMessage={props.deleteMessage}\r\n          deletingMessages={props.deletingMessages}\r\n        />\r\n      )\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"dialogs-field\">\r\n      <div className=\"dialogs-field__messages\">\r\n        {messages}\r\n      </div>\r\n\r\n      <ChatField sendNewMessage={props.sendNewMessage}\r\n                 contactsListElem={props.contactsListElem}\r\n      />\r\n\r\n    </div>\r\n  )\r\n});\r\n\r\nlet s = 5;\r\n\r\nexport default ChatWall;\r\n"]},"metadata":{},"sourceType":"module"}