{"ast":null,"code":"//Инфо для дальнейшей конфигурации.\n//Массив принимает функции-парсеры ссылок.\n//Функция принимает ссылку и объект с настроками.\n//Функция не должна возвращать true, если данная сылка (ресурс) для нее не предназначены.\n//Функция возвращает готовый для innerHtml вставки текст.\nvar parsers=[youtube];//Главная функция\nvar linkParser=function linkParser(string,settings){var text=string;var div=document.createElement('div');div.innerHTML=text;var anchorsLength=div.getElementsByTagName('a').length;for(var i=0;i<anchorsLength;i++){var aElem=div.getElementsByTagName('a')[i];var outer=aElem.outerHTML;var link=aElem.innerHTML;for(var j=0;j<parsers.length;j++){//проходит по всем парсерам и ищет совпадение по обработке\nvar result=parsers[i](link,settings);if(result){text=text.replace(\"\".concat(outer),\"\".concat(result));break;}}}return text;};export default linkParser;//функция-парсер\nfunction youtube(link,settings){if(!/youtube\\.com\\/watch\\?/.test(link))return;var parser=function parser(link){var width=settings.width,height=settings.height;var match=link.match(/watch\\?v=(\\w{11})/);var src=\"https://www.youtube.com/embed/\".concat(match[1]);return\"<iframe width=\".concat(width,\" height=\").concat(height,\" src=\").concat(src,\" frameBorder=\\\"0\\\"\\n                allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\"\\n                allowFullScreen></iframe>\");};return parser(link);}","map":{"version":3,"sources":["D:/my-own-social-network/src/common/JS/linkParser.js"],"names":["parsers","youtube","linkParser","string","settings","text","div","document","createElement","innerHTML","anchorsLength","getElementsByTagName","length","i","aElem","outer","outerHTML","link","j","result","replace","test","parser","width","height","match","src"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA,GAAMA,CAAAA,OAAO,CAAG,CACdC,OADc,CAAhB,CAKA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,QAAT,CAAsB,CACvC,GAAIC,CAAAA,IAAI,CAAGF,MAAX,CACA,GAAMG,CAAAA,GAAG,CAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ,CACAF,GAAG,CAACG,SAAJ,CAAgBJ,IAAhB,CACA,GAAMK,CAAAA,aAAa,CAAGJ,GAAG,CAACK,oBAAJ,CAAyB,GAAzB,EAA8BC,MAApD,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,aAApB,CAAmCG,CAAC,EAApC,CAAwC,CACtC,GAAMC,CAAAA,KAAK,CAAGR,GAAG,CAACK,oBAAJ,CAAyB,GAAzB,EAA8BE,CAA9B,CAAd,CACA,GAAME,CAAAA,KAAK,CAAGD,KAAK,CAACE,SAApB,CACA,GAAMC,CAAAA,IAAI,CAAGH,KAAK,CAACL,SAAnB,CAEA,IAAK,GAAIS,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGlB,OAAO,CAACY,MAA5B,CAAoCM,CAAC,EAArC,CAAyC,CACvC;AACA,GAAMC,CAAAA,MAAM,CAAInB,OAAO,CAACa,CAAD,CAAP,CAAWI,IAAX,CAAiBb,QAAjB,CAAhB,CAEA,GAAIe,MAAJ,CAAY,CACVd,IAAI,CAAGA,IAAI,CAACe,OAAL,WAAgBL,KAAhB,YAA4BI,MAA5B,EAAP,CACA,MACD,CACF,CACF,CACD,MAAOd,CAAAA,IAAP,CACD,CAtBD,CAwBA,cAAeH,CAAAA,UAAf,CAOA;AACA,QAASD,CAAAA,OAAT,CAAkBgB,IAAlB,CAAwBb,QAAxB,CAAkC,CAChC,GAAI,CAAC,wBAAwBiB,IAAxB,CAA6BJ,IAA7B,CAAL,CAAyC,OAEzC,GAAMK,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACL,IAAD,CAAU,IAChBM,CAAAA,KADgB,CACCnB,QADD,CAChBmB,KADgB,CACTC,MADS,CACCpB,QADD,CACToB,MADS,CAEvB,GAAMC,CAAAA,KAAK,CAAGR,IAAI,CAACQ,KAAL,CAAW,mBAAX,CAAd,CACA,GAAMC,CAAAA,GAAG,yCAAoCD,KAAK,CAAC,CAAD,CAAzC,CAAT,CAEA,8BAAwBF,KAAxB,oBAAwCC,MAAxC,iBAAsDE,GAAtD,qKAID,CATD,CAWA,MAAOJ,CAAAA,MAAM,CAACL,IAAD,CAAb,CACD","sourcesContent":["\r\n//Инфо для дальнейшей конфигурации.\r\n//Массив принимает функции-парсеры ссылок.\r\n//Функция принимает ссылку и объект с настроками.\r\n//Функция не должна возвращать true, если данная сылка (ресурс) для нее не предназначены.\r\n//Функция возвращает готовый для innerHtml вставки текст.\r\nconst parsers = [\r\n  youtube\r\n];\r\n\r\n\r\n//Главная функция\r\nconst linkParser = (string, settings) => {\r\n  let text = string;\r\n  const div = document.createElement('div');\r\n  div.innerHTML = text;\r\n  const anchorsLength = div.getElementsByTagName('a').length;\r\n\r\n  for (let i = 0; i < anchorsLength; i++) {\r\n    const aElem = div.getElementsByTagName('a')[i];\r\n    const outer = aElem.outerHTML;\r\n    const link = aElem.innerHTML;\r\n\r\n    for (let j = 0; j < parsers.length; j++) {\r\n      //проходит по всем парсерам и ищет совпадение по обработке\r\n      const result = (parsers[i](link, settings));\r\n\r\n      if (result) {\r\n        text = text.replace(`${outer}`, `${result}`);\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return text\r\n};\r\n\r\nexport default linkParser;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//функция-парсер\r\nfunction youtube (link, settings) {\r\n  if (!/youtube\\.com\\/watch\\?/.test(link)) return;\r\n\r\n  const parser = (link) => {\r\n    const {width, height} = settings;\r\n    const match = link.match(/watch\\?v=(\\w{11})/);\r\n    const src = `https://www.youtube.com/embed/${match[1]}`;\r\n\r\n    return `<iframe width=${width} height=${height} src=${src} frameBorder=\"0\"\r\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                allowFullScreen></iframe>`\r\n\r\n  };\r\n\r\n  return parser(link);\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}